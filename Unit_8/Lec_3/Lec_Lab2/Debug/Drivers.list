
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  4 .ARM          00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de4  08000dec  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000dec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000dec  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c5b  00000000  00000000  00010e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008cd  00000000  00000000  00012a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d1c  00000000  00000000  0001333d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00014060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  00014288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000109c  00000000  00000000  00014448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003310  00000000  00000000  000154e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b38c  00000000  00000000  000187f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00023b80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d8  00000000  00000000  00023bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000da4 	.word	0x08000da4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000da4 	.word	0x08000da4

08000170 <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <GET_CRLH_POS>:

#include"STM32F103_C6_GPIO_Driver.h"


uint8_t GET_CRLH_POS(uint16_t Pin)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (Pin)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <GET_CRLH_POS+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <GET_CRLH_POS+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <GET_CRLH_POS+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <GET_CRLH_POS+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <GET_CRLH_POS+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <GET_CRLH_POS+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <GET_CRLH_POS+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <GET_CRLH_POS+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <GET_CRLH_POS+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <GET_CRLH_POS+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <GET_CRLH_POS+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <GET_CRLH_POS+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <GET_CRLH_POS+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <GET_CRLH_POS+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <GET_CRLH_POS+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <GET_CRLH_POS+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <GET_CRLH_POS+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <GET_CRLH_POS+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <GET_CRLH_POS+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <GET_CRLH_POS+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <GET_CRLH_POS+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <GET_CRLH_POS+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <GET_CRLH_POS+0x13a>
 80004b0:	e01f      	b.n	80004f2 <GET_CRLH_POS+0x162>
	{
		case PIN_NUM__0:
			return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__1:
			return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__2:
			return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__3:
			return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__4:
			return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__5:
			return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__6:
			return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__7:
			return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__8:
			return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__9:
			return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__10:
			return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__11:
			return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__12:
			return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__13:
			return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__14:
			return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;

		case PIN_NUM__15:
			return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <GET_CRLH_POS+0x164>
			break;
	}
	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_INIT>:
//*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_**_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*
//*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_**_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*


void MCAL_GPIO_INIT(GPIO_REG_t* GPIOx,GPIO_Pin_init_t* PinCnfg)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	volatile uint32_t* regstr = NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0 ;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
	//choosing which register will modify it
	regstr	= (PinCnfg->PIN_NUM < PIN_NUM__8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	2bff      	cmp	r3, #255	; 0xff
 800051a:	d801      	bhi.n	8000520 <MCAL_GPIO_INIT+0x20>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	e001      	b.n	8000524 <MCAL_GPIO_INIT+0x24>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3304      	adds	r3, #4
 8000524:	60bb      	str	r3, [r7, #8]

	//Reset every pin's bit before using it
	(*regstr) &= ~(0xF << GET_CRLH_POS(PinCnfg->PIN_NUM));
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff2f 	bl	8000390 <GET_CRLH_POS>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	230f      	movs	r3, #15
 8000538:	4093      	lsls	r3, r2
 800053a:	43da      	mvns	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	401a      	ands	r2, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	601a      	str	r2, [r3, #0]

	// If pin is output
	if( (PinCnfg->PIN_MODE == GPIO_MODE_OPEN_DRAIN_OP) ||( PinCnfg->PIN_MODE == GPIO_MODE_PUSH_PULL_OP )||( PinCnfg->PIN_MODE == GPIO_MODE_AF_OPEN_DRAIN_OP )||( PinCnfg->PIN_MODE == GPIO_MODE_AF_PUSH_PULL_OP) )
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b05      	cmp	r3, #5
 800054e:	d00e      	beq.n	800056e <MCAL_GPIO_INIT+0x6e>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b04      	cmp	r3, #4
 8000558:	d009      	beq.n	800056e <MCAL_GPIO_INIT+0x6e>
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b07      	cmp	r3, #7
 8000562:	d004      	beq.n	800056e <MCAL_GPIO_INIT+0x6e>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b06      	cmp	r3, #6
 800056c:	d110      	bne.n	8000590 <MCAL_GPIO_INIT+0x90>
	{
		check = ( (( (PinCnfg->PIN_MODE - 4) << 2 ) | (PinCnfg->PIN_SPEED )) & 0x0F);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	3b04      	subs	r3, #4
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	b25a      	sxtb	r2, r3
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b25b      	sxtb	r3, r3
 8000582:	4313      	orrs	r3, r2
 8000584:	b25b      	sxtb	r3, r3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f003 030f 	and.w	r3, r3, #15
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	e033      	b.n	80005f8 <MCAL_GPIO_INIT+0xf8>
	}
	// If pin is Input
	else
	{
		if( (PinCnfg->PIN_MODE == GPIO_MODE_ANALOG) || (PinCnfg->PIN_MODE == GPIO_MODE_FLOATING_IP) )
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <MCAL_GPIO_INIT+0xa4>
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d108      	bne.n	80005b6 <MCAL_GPIO_INIT+0xb6>
		{
			check = ((((PinCnfg->PIN_MODE ) << 2) | 0x00 ) & 0x0F );
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 030f 	and.w	r3, r3, #15
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	e020      	b.n	80005f8 <MCAL_GPIO_INIT+0xf8>
		}
		else if(PinCnfg->PIN_MODE == GPIO_MODE_AF_IP)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d102      	bne.n	80005c6 <MCAL_GPIO_INIT+0xc6>
		{
			check = ((((GPIO_MODE_FLOATING_IP) << 2) | 0x00 ) & 0x0F );
 80005c0:	2304      	movs	r3, #4
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e018      	b.n	80005f8 <MCAL_GPIO_INIT+0xf8>
		}
		else
		{
			check = ((((GPIO_MODE_PULL_UP_IP) << 2) | 0x00 ) & 0x0F );
 80005c6:	2308      	movs	r3, #8
 80005c8:	73fb      	strb	r3, [r7, #15]

			if(PinCnfg->PIN_MODE == GPIO_MODE_PULL_UP_IP){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d108      	bne.n	80005e6 <MCAL_GPIO_INIT+0xe6>
//				SET_PIN(GPIOx->ODR,PinCnfg->PIN_NUM);
				GPIOx->ODR |= PinCnfg->PIN_NUM;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	431a      	orrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	e008      	b.n	80005f8 <MCAL_GPIO_INIT+0xf8>

			}
			else
			{
//				RESET_PIN(GPIOx->ODR,PinCnfg->PIN_NUM);
				GPIOx->ODR &= ~(PinCnfg->PIN_NUM);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	43da      	mvns	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]

			}
		}
	}

	(*regstr) |= (check << GET_CRLH_POS(PinCnfg->PIN_NUM));
 80005f8:	7bfc      	ldrb	r4, [r7, #15]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fec5 	bl	8000390 <GET_CRLH_POS>
 8000606:	4603      	mov	r3, r0
 8000608:	fa04 f203 	lsl.w	r2, r4, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bd90      	pop	{r4, r7, pc}
	...

08000620 <MCAL_RCC_GET_SYSCLK>:

const uint8_t APBPrescTable[8U] = {0,0,0,0,1,2,3,4};
const uint16_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GET_SYSCLK(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	switch((RCC->CFGR>>2) & 0b11 )
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MCAL_RCC_GET_SYSCLK+0x38>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	f003 0303 	and.w	r3, r3, #3
 800062e:	2b02      	cmp	r3, #2
 8000630:	d00a      	beq.n	8000648 <MCAL_RCC_GET_SYSCLK+0x28>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d80a      	bhi.n	800064c <MCAL_RCC_GET_SYSCLK+0x2c>
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <MCAL_RCC_GET_SYSCLK+0x20>
 800063a:	2b01      	cmp	r3, #1
 800063c:	d002      	beq.n	8000644 <MCAL_RCC_GET_SYSCLK+0x24>
		case 1:
			return HSE_Clock;
		case 2:
			return 16000000;
		default:
			break;
 800063e:	e005      	b.n	800064c <MCAL_RCC_GET_SYSCLK+0x2c>
			return HSI_Clock;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MCAL_RCC_GET_SYSCLK+0x3c>)
 8000642:	e004      	b.n	800064e <MCAL_RCC_GET_SYSCLK+0x2e>
			return HSE_Clock;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MCAL_RCC_GET_SYSCLK+0x40>)
 8000646:	e002      	b.n	800064e <MCAL_RCC_GET_SYSCLK+0x2e>
			return 16000000;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MCAL_RCC_GET_SYSCLK+0x40>)
 800064a:	e000      	b.n	800064e <MCAL_RCC_GET_SYSCLK+0x2e>
			break;
 800064c:	bf00      	nop
	}
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	007a1200 	.word	0x007a1200
 8000660:	00f42400 	.word	0x00f42400

08000664 <MCAL_RCC_GET_HCLK>:

uint32_t MCAL_RCC_GET_HCLK(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GET_SYSCLK() >> AHBPrescTable[( (RCC->CFGR >> 4) )& 0xF] );
 8000668:	f7ff ffda 	bl	8000620 <MCAL_RCC_GET_SYSCLK>
 800066c:	4602      	mov	r2, r0
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MCAL_RCC_GET_HCLK+0x24>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	4904      	ldr	r1, [pc, #16]	; (800068c <MCAL_RCC_GET_HCLK+0x28>)
 800067a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800067e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	08000dc4 	.word	0x08000dc4

08000690 <MCAL_RCC_GET_PCLK1>:
uint32_t MCAL_RCC_GET_PCLK1(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_HCLK() >> APBPrescTable[( (RCC->CFGR >> 8) ) & 0b111] );
 8000694:	f7ff ffe6 	bl	8000664 <MCAL_RCC_GET_HCLK>
 8000698:	4602      	mov	r2, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_GET_PCLK1+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4903      	ldr	r1, [pc, #12]	; (80006b4 <MCAL_RCC_GET_PCLK1+0x24>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08000dbc 	.word	0x08000dbc

080006b8 <MCAL_RCC_GET_PCLK2>:
uint32_t MCAL_RCC_GET_PCLK2(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_HCLK() >> APBPrescTable[( (RCC->CFGR >> 11) ) & 0b111] );
 80006bc:	f7ff ffd2 	bl	8000664 <MCAL_RCC_GET_HCLK>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MCAL_RCC_GET_PCLK2+0x20>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	0adb      	lsrs	r3, r3, #11
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	4903      	ldr	r1, [pc, #12]	; (80006dc <MCAL_RCC_GET_PCLK2+0x24>)
 80006ce:	5ccb      	ldrb	r3, [r1, r3]
 80006d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	08000dbc 	.word	0x08000dbc

080006e0 <SPI1_IRQHandler>:
 *																			IRQ
 *====================================================================================================================================================
 */

void SPI1_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1) )>> 1);
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <SPI1_IRQHandler+0x54>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	085b      	lsrs	r3, r3, #1
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	793b      	ldrb	r3, [r7, #4]
 80006f4:	f362 0300 	bfi	r3, r2, #0, #1
 80006f8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0) )>> 0);
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <SPI1_IRQHandler+0x54>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	793b      	ldrb	r3, [r7, #4]
 8000706:	f362 0341 	bfi	r3, r2, #1, #1
 800070a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4) )>> 4);
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <SPI1_IRQHandler+0x54>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	793b      	ldrb	r3, [r7, #4]
 800071a:	f362 0382 	bfi	r3, r2, #2, #1
 800071e:	713b      	strb	r3, [r7, #4]

	Global_Temp_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SPI1_IRQHandler+0x58>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	7938      	ldrb	r0, [r7, #4]
 8000728:	4798      	blx	r3
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40013000 	.word	0x40013000
 8000738:	20000058 	.word	0x20000058

0800073c <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1) )>> 1);
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <SPI2_IRQHandler+0x54>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	793b      	ldrb	r3, [r7, #4]
 8000750:	f362 0300 	bfi	r3, r2, #0, #1
 8000754:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0) )>> 0);
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <SPI2_IRQHandler+0x54>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	793b      	ldrb	r3, [r7, #4]
 8000762:	f362 0341 	bfi	r3, r2, #1, #1
 8000766:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4) )>> 4);
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <SPI2_IRQHandler+0x54>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	091b      	lsrs	r3, r3, #4
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	f362 0382 	bfi	r3, r2, #2, #1
 800077a:	713b      	strb	r3, [r7, #4]

	Global_Temp_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SPI2_IRQHandler+0x58>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	7938      	ldrb	r0, [r7, #4]
 8000784:	4798      	blx	r3

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40013000 	.word	0x40013000
 8000794:	20000058 	.word	0x20000058

08000798 <MCAL_UART_Init>:
 *																		APIs
 *====================================================================================================================================================
 */

void MCAL_UART_Init(USART_REG_t* USARTx,USART_CONFG_t* USARTCnfg)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	uint32_t pClk,Brr;


	if(USARTx == USART1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a59      	ldr	r2, [pc, #356]	; (800090c <MCAL_UART_Init+0x174>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d109      	bne.n	80007be <MCAL_UART_Init+0x26>
	{
		ENB_USART1();
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <MCAL_UART_Init+0x178>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a58      	ldr	r2, [pc, #352]	; (8000910 <MCAL_UART_Init+0x178>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6193      	str	r3, [r2, #24]
		Global_UART_CONFG[UART1_Index] = USARTCnfg;
 80007b6:	4a57      	ldr	r2, [pc, #348]	; (8000914 <MCAL_UART_Init+0x17c>)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e01a      	b.n	80007f4 <MCAL_UART_Init+0x5c>
	}

		else if(USARTx == USART2)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a55      	ldr	r2, [pc, #340]	; (8000918 <MCAL_UART_Init+0x180>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d109      	bne.n	80007da <MCAL_UART_Init+0x42>
		{
			ENB_USART2();
 80007c6:	4b52      	ldr	r3, [pc, #328]	; (8000910 <MCAL_UART_Init+0x178>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a51      	ldr	r2, [pc, #324]	; (8000910 <MCAL_UART_Init+0x178>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
			Global_UART_CONFG[UART2_Index] = USARTCnfg;
 80007d2:	4a50      	ldr	r2, [pc, #320]	; (8000914 <MCAL_UART_Init+0x17c>)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	6053      	str	r3, [r2, #4]
 80007d8:	e00c      	b.n	80007f4 <MCAL_UART_Init+0x5c>
		}
		else if(USARTx == USART3)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a4f      	ldr	r2, [pc, #316]	; (800091c <MCAL_UART_Init+0x184>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d108      	bne.n	80007f4 <MCAL_UART_Init+0x5c>
		{
			ENB_USART3();
 80007e2:	4b4b      	ldr	r3, [pc, #300]	; (8000910 <MCAL_UART_Init+0x178>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a4a      	ldr	r2, [pc, #296]	; (8000910 <MCAL_UART_Init+0x178>)
 80007e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ec:	61d3      	str	r3, [r2, #28]
			Global_UART_CONFG[UART3_Index] = USARTCnfg;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <MCAL_UART_Init+0x17c>)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	6093      	str	r3, [r2, #8]
		}

	/*Enable USART Module*/
	USARTx->USART_CR1 |= 1<<13;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60da      	str	r2, [r3, #12]

	/*Enable USART TX/RX*/
	USARTx->USART_CR1 |= USARTCnfg->USART_MODE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	431a      	orrs	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60da      	str	r2, [r3, #12]

	/*M bits 8 | 9 */
	USARTx->USART_CR1 |= USARTCnfg->USART_BITs;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	8912      	ldrh	r2, [r2, #8]
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60da      	str	r2, [r3, #12]

	/*Parity Bit*/
	USARTx->USART_CR1 |= USARTCnfg->USART_PARITYBIT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	7a92      	ldrb	r2, [r2, #10]
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60da      	str	r2, [r3, #12]

	/*Stop bit*/
	USARTx->USART_CR2 |= USARTCnfg->USART_STOPBIT;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	7ad2      	ldrb	r2, [r2, #11]
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	611a      	str	r2, [r3, #16]

	/*USART FLW Control*/
	USARTx->USART_CR3 |= USARTCnfg->USART_HW_FLW_CTL;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	7b12      	ldrb	r2, [r2, #12]
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	615a      	str	r2, [r3, #20]

	if(USARTx == USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a30      	ldr	r2, [pc, #192]	; (800090c <MCAL_UART_Init+0x174>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d103      	bne.n	8000856 <MCAL_UART_Init+0xbe>
		pClk = MCAL_RCC_GET_PCLK2();
 800084e:	f7ff ff33 	bl	80006b8 <MCAL_RCC_GET_PCLK2>
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	e002      	b.n	800085c <MCAL_UART_Init+0xc4>
	else
		pClk = MCAL_RCC_GET_PCLK1();
 8000856:	f7ff ff1b 	bl	8000690 <MCAL_RCC_GET_PCLK1>
 800085a:	60f8      	str	r0, [r7, #12]

	Brr = UART_BRR_Register(pClk,USARTCnfg->USART_BAUDRATE);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	fbb2 f3f3 	udiv	r3, r2, r3
 8000868:	0119      	lsls	r1, r3, #4
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	009a      	lsls	r2, r3, #2
 8000874:	441a      	add	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	fbb0 f3f3 	udiv	r3, r0, r3
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	fb00 f303 	mul.w	r3, r0, r3
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <MCAL_UART_Init+0x188>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	095b      	lsrs	r3, r3, #5
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	430b      	orrs	r3, r1
 80008a4:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = Brr;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	609a      	str	r2, [r3, #8]

	if(USARTCnfg->USART_IRQ != USART_IRQ_Enable_None)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	7b5b      	ldrb	r3, [r3, #13]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d026      	beq.n	8000902 <MCAL_UART_Init+0x16a>
	{
		USARTx->USART_CR1 |= (USARTCnfg->USART_IRQ);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	7b52      	ldrb	r2, [r2, #13]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60da      	str	r2, [r3, #12]

		if (USARTx == USART1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <MCAL_UART_Init+0x174>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <MCAL_UART_Init+0x140>
		{
			NVIC_IRQ37_USART1_EN();
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
		{
			NVIC_IRQ39_USART3_EN();
		}
	}
}
 80008d6:	e014      	b.n	8000902 <MCAL_UART_Init+0x16a>
		else if(USARTx == USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MCAL_UART_Init+0x180>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	e009      	b.n	8000902 <MCAL_UART_Init+0x16a>
		else if(USARTx == USART3)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <MCAL_UART_Init+0x184>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d105      	bne.n	8000902 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <MCAL_UART_Init+0x18c>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40013800 	.word	0x40013800
 8000910:	40021000 	.word	0x40021000
 8000914:	20000060 	.word	0x20000060
 8000918:	40004400 	.word	0x40004400
 800091c:	40004800 	.word	0x40004800
 8000920:	51eb851f 	.word	0x51eb851f
 8000924:	e000e104 	.word	0xe000e104

08000928 <MCAL_UART_TX>:
	else if(USARTx == USART3)
		RES_USART3();
}

void MCAL_UART_TX(USART_REG_t* USARTx,uint16_t *data,enum polling PollingEN)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == enable)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d106      	bne.n	800094a <MCAL_UART_TX+0x22>
		while(!(USARTx->USART_SR & 1<<7));
 800093c:	bf00      	nop
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <MCAL_UART_TX+0x16>


	if(USARTx == USART1)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MCAL_UART_TX+0xb4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d112      	bne.n	8000978 <MCAL_UART_TX+0x50>
	{
		if(Global_UART_CONFG[UART1_Index]->USART_BITs == USART_BITs_9)
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MCAL_UART_TX+0xb8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	891b      	ldrh	r3, [r3, #8]
 8000958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800095c:	d106      	bne.n	800096c <MCAL_UART_TX+0x44>
		{
			USARTx->USART_DR = (*data) & (uint16_t)0x1FF;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	605a      	str	r2, [r3, #4]
		else
		{
			USARTx->USART_DR = (*data) & (uint8_t)0xFF;
		}
	}
}
 800096a:	e032      	b.n	80009d2 <MCAL_UART_TX+0xaa>
			USARTx->USART_DR = (*data) & (uint8_t)0xFF;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	605a      	str	r2, [r3, #4]
}
 8000976:	e02c      	b.n	80009d2 <MCAL_UART_TX+0xaa>
	else if(USARTx == USART2)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <MCAL_UART_TX+0xbc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d112      	bne.n	80009a6 <MCAL_UART_TX+0x7e>
		if(Global_UART_CONFG[UART2_Index]->USART_BITs == USART_BITs_9)
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MCAL_UART_TX+0xb8>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	891b      	ldrh	r3, [r3, #8]
 8000986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800098a:	d106      	bne.n	800099a <MCAL_UART_TX+0x72>
			USARTx->USART_DR = (*data) & (uint16_t)0x1FF;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	605a      	str	r2, [r3, #4]
}
 8000998:	e01b      	b.n	80009d2 <MCAL_UART_TX+0xaa>
			USARTx->USART_DR = (*data) & (uint8_t)0xFF;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	605a      	str	r2, [r3, #4]
}
 80009a4:	e015      	b.n	80009d2 <MCAL_UART_TX+0xaa>
	else if(USARTx == USART3)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MCAL_UART_TX+0xc0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d111      	bne.n	80009d2 <MCAL_UART_TX+0xaa>
		if(Global_UART_CONFG[UART2_Index]->USART_BITs == USART_BITs_9)
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MCAL_UART_TX+0xb8>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	891b      	ldrh	r3, [r3, #8]
 80009b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009b8:	d106      	bne.n	80009c8 <MCAL_UART_TX+0xa0>
			USARTx->USART_DR = (*data) & (uint16_t)0x1FF;
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	605a      	str	r2, [r3, #4]
}
 80009c6:	e004      	b.n	80009d2 <MCAL_UART_TX+0xaa>
			USARTx->USART_DR = (*data) & (uint8_t)0xFF;
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	605a      	str	r2, [r3, #4]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	40013800 	.word	0x40013800
 80009e0:	20000060 	.word	0x20000060
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40004800 	.word	0x40004800

080009ec <MCAL_UART_RX>:
	while(!(USARTx->USART_SR & 1<<6));
}


void MCAL_UART_RX(USART_REG_t* USARTx,uint16_t *data,enum polling PollingEN)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	4613      	mov	r3, r2
 80009f8:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == enable)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d106      	bne.n	8000a0e <MCAL_UART_RX+0x22>
		while(!(USARTx->USART_SR & 1<<5));
 8000a00:	bf00      	nop
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f9      	beq.n	8000a02 <MCAL_UART_RX+0x16>

	if(USARTx == USART1)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <MCAL_UART_RX+0x15c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12e      	bne.n	8000a74 <MCAL_UART_RX+0x88>
	{
		if(Global_UART_CONFG[UART1_Index]->USART_BITs == USART_BITs_9)
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	891b      	ldrh	r3, [r3, #8]
 8000a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a20:	d112      	bne.n	8000a48 <MCAL_UART_RX+0x5c>
		{
			if(Global_UART_CONFG[UART1_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000a22:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	7a9b      	ldrb	r3, [r3, #10]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d105      	bne.n	8000a38 <MCAL_UART_RX+0x4c>
			{
				/*All 9 bits are data*/
				//				*((uint16_t*)data) = USARTx->USART_DR;
				*data = USARTx->USART_DR;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	801a      	strh	r2, [r3, #0]
				*(data) = USARTx->USART_DR & (uint8_t)0x7F;
			}
		}
	}

}
 8000a36:	e082      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*data = USARTx->USART_DR & (uint8_t)0xFF;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	801a      	strh	r2, [r3, #0]
}
 8000a46:	e07a      	b.n	8000b3e <MCAL_UART_RX+0x152>
			if(Global_UART_CONFG[UART1_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	7a9b      	ldrb	r3, [r3, #10]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d107      	bne.n	8000a62 <MCAL_UART_RX+0x76>
				*(data) = USARTx->USART_DR & (uint8_t)0xFF;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	801a      	strh	r2, [r3, #0]
}
 8000a60:	e06d      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*(data) = USARTx->USART_DR & (uint8_t)0x7F;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	801a      	strh	r2, [r3, #0]
}
 8000a72:	e064      	b.n	8000b3e <MCAL_UART_RX+0x152>
	else if(USARTx == USART2)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4a36      	ldr	r2, [pc, #216]	; (8000b50 <MCAL_UART_RX+0x164>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d12e      	bne.n	8000ada <MCAL_UART_RX+0xee>
		if(Global_UART_CONFG[UART2_Index]->USART_BITs == USART_BITs_9)
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	891b      	ldrh	r3, [r3, #8]
 8000a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a86:	d112      	bne.n	8000aae <MCAL_UART_RX+0xc2>
			if(Global_UART_CONFG[UART2_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	7a9b      	ldrb	r3, [r3, #10]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d105      	bne.n	8000a9e <MCAL_UART_RX+0xb2>
				*(data) = USARTx->USART_DR;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	801a      	strh	r2, [r3, #0]
}
 8000a9c:	e04f      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*(data) = USARTx->USART_DR & (uint8_t)0xFF;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	801a      	strh	r2, [r3, #0]
}
 8000aac:	e047      	b.n	8000b3e <MCAL_UART_RX+0x152>
			if(Global_UART_CONFG[UART2_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	7a9b      	ldrb	r3, [r3, #10]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <MCAL_UART_RX+0xdc>
				*(data) = USARTx->USART_DR & (uint8_t)0xFF;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	801a      	strh	r2, [r3, #0]
}
 8000ac6:	e03a      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*(data) = USARTx->USART_DR & (uint8_t)0x7F;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	801a      	strh	r2, [r3, #0]
}
 8000ad8:	e031      	b.n	8000b3e <MCAL_UART_RX+0x152>
	else if(USARTx == USART3)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <MCAL_UART_RX+0x168>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12d      	bne.n	8000b3e <MCAL_UART_RX+0x152>
		if(Global_UART_CONFG[UART3_Index]->USART_BITs == USART_BITs_9)
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	891b      	ldrh	r3, [r3, #8]
 8000ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aec:	d112      	bne.n	8000b14 <MCAL_UART_RX+0x128>
			if(Global_UART_CONFG[UART3_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	7a9b      	ldrb	r3, [r3, #10]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <MCAL_UART_RX+0x118>
				*(data) = USARTx->USART_DR;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	801a      	strh	r2, [r3, #0]
}
 8000b02:	e01c      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*(data) = USARTx->USART_DR & (uint8_t)0xFF;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	801a      	strh	r2, [r3, #0]
}
 8000b12:	e014      	b.n	8000b3e <MCAL_UART_RX+0x152>
			if(Global_UART_CONFG[UART3_Index]->USART_PARITYBIT == USART_PARITY_NONE)
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MCAL_UART_RX+0x160>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	7a9b      	ldrb	r3, [r3, #10]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <MCAL_UART_RX+0x142>
				*(data) = USARTx->USART_DR & (uint8_t)0xFF;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	801a      	strh	r2, [r3, #0]
}
 8000b2c:	e007      	b.n	8000b3e <MCAL_UART_RX+0x152>
				*(data) = USARTx->USART_DR & (uint8_t)0x7F;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	801a      	strh	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	20000060 	.word	0x20000060
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40004800 	.word	0x40004800

08000b58 <MCAL_UART_GPIO_Init>:


void MCAL_UART_GPIO_Init(USART_REG_t* USARTx)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	GPIO_Pin_init_t pinCnfg;

	if(USARTx == USART1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a2a      	ldr	r2, [pc, #168]	; (8000c0c <MCAL_UART_GPIO_Init+0xb4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d117      	bne.n	8000b98 <MCAL_UART_GPIO_Init+0x40>
	{
		//TX
		pinCnfg.PIN_NUM = PIN_NUM__9;
 8000b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6c:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_PUSH_PULL_OP;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	73bb      	strb	r3, [r7, #14]
		pinCnfg.PIN_SPEED = GPIO_MODE_SPEED_10M;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]

		MCAL_GPIO_INIT(GPIOA, &pinCnfg);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4824      	ldr	r0, [pc, #144]	; (8000c10 <MCAL_UART_GPIO_Init+0xb8>)
 8000b7e:	f7ff fcbf 	bl	8000500 <MCAL_GPIO_INIT>

		//RX
		pinCnfg.PIN_NUM = PIN_NUM__10;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_IP;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	73bb      	strb	r3, [r7, #14]

		MCAL_GPIO_INIT(GPIOA, &pinCnfg);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	481f      	ldr	r0, [pc, #124]	; (8000c10 <MCAL_UART_GPIO_Init+0xb8>)
 8000b94:	f7ff fcb4 	bl	8000500 <MCAL_GPIO_INIT>
		}
	}



	if(USARTx == USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <MCAL_UART_GPIO_Init+0xbc>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d115      	bne.n	8000bcc <MCAL_UART_GPIO_Init+0x74>
	{
		//TX
		pinCnfg.PIN_NUM = PIN_NUM__2;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_PUSH_PULL_OP;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	73bb      	strb	r3, [r7, #14]
		pinCnfg.PIN_SPEED = GPIO_MODE_SPEED_10M;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]

		MCAL_GPIO_INIT(GPIOA, &pinCnfg);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MCAL_UART_GPIO_Init+0xb8>)
 8000bb4:	f7ff fca4 	bl	8000500 <MCAL_GPIO_INIT>

		//RX
		pinCnfg.PIN_NUM = PIN_NUM__3;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_IP;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	73bb      	strb	r3, [r7, #14]

		MCAL_GPIO_INIT(GPIOA, &pinCnfg);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <MCAL_UART_GPIO_Init+0xb8>)
 8000bc8:	f7ff fc9a 	bl	8000500 <MCAL_GPIO_INIT>
	}




	if(USARTx == USART3)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MCAL_UART_GPIO_Init+0xc0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d117      	bne.n	8000c04 <MCAL_UART_GPIO_Init+0xac>
	{
		//TX
		pinCnfg.PIN_NUM = PIN_NUM__10;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_PUSH_PULL_OP;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	73bb      	strb	r3, [r7, #14]
		pinCnfg.PIN_SPEED = GPIO_MODE_SPEED_10M;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]

		MCAL_GPIO_INIT(GPIOB, &pinCnfg);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MCAL_UART_GPIO_Init+0xc4>)
 8000bea:	f7ff fc89 	bl	8000500 <MCAL_GPIO_INIT>

		//RX
		pinCnfg.PIN_NUM = PIN_NUM__11;
 8000bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf2:	81bb      	strh	r3, [r7, #12]
		pinCnfg.PIN_MODE = GPIO_MODE_AF_IP;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	73bb      	strb	r3, [r7, #14]

		MCAL_GPIO_INIT(GPIOB, &pinCnfg);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MCAL_UART_GPIO_Init+0xc4>)
 8000c00:	f7ff fc7e 	bl	8000500 <MCAL_GPIO_INIT>
			pinCnfg.PIN_SPEED = GPIO_MODE_SPEED_10M;

			MCAL_GPIO_INIT(GPIOA, &pinCnfg);
		}
	}
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40004800 	.word	0x40004800
 8000c1c:	40010c00 	.word	0x40010c00

08000c20 <USART1_IRQHandler>:



void USART1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	Global_UART_CONFG[UART1_Index]->P_IRQ_CallBack();
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <USART1_IRQHandler+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	4798      	blx	r3
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000060 	.word	0x20000060

08000c34 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	Global_UART_CONFG[UART2_Index]->P_IRQ_CallBack();
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <USART2_IRQHandler+0x10>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4798      	blx	r3
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000060 	.word	0x20000060

08000c48 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	Global_UART_CONFG[UART3_Index]->P_IRQ_CallBack();
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <USART3_IRQHandler+0x10>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4798      	blx	r3
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000060 	.word	0x20000060

08000c5c <clks>:
uint16_t data;



void clks(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	ENB_PORTA();
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <clks+0x3c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <clks+0x3c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
	ENB_AFIO();
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <clks+0x3c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <clks+0x3c>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6193      	str	r3, [r2, #24]
	ENB_PORTB();
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <clks+0x3c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <clks+0x3c>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
	ENB_USART1();
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <clks+0x3c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <clks+0x3c>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6193      	str	r3, [r2, #24]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40021000 	.word	0x40021000

08000c9c <UART_IRQ_CallBack>:

void UART_IRQ_CallBack(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	MCAL_UART_RX(USART1, &data, disable);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4905      	ldr	r1, [pc, #20]	; (8000cb8 <UART_IRQ_CallBack+0x1c>)
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <UART_IRQ_CallBack+0x20>)
 8000ca6:	f7ff fea1 	bl	80009ec <MCAL_UART_RX>
	MCAL_UART_TX(USART1, &data, enable);
 8000caa:	2200      	movs	r2, #0
 8000cac:	4902      	ldr	r1, [pc, #8]	; (8000cb8 <UART_IRQ_CallBack+0x1c>)
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <UART_IRQ_CallBack+0x20>)
 8000cb0:	f7ff fe3a 	bl	8000928 <MCAL_UART_TX>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000006c 	.word	0x2000006c
 8000cbc:	40013800 	.word	0x40013800

08000cc0 <main>:

int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
	clks();
 8000cc6:	f7ff ffc9 	bl	8000c5c <clks>
	USART_CONFG_t USART1_Cnfg;
	USART1_Cnfg.USART_MODE = USART_MODE_TX_RX;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	713b      	strb	r3, [r7, #4]
	USART1_Cnfg.USART_BAUDRATE = USART_BAUDRATE_115200;
 8000cce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cd2:	60bb      	str	r3, [r7, #8]
	USART1_Cnfg.USART_BITs = USART_BITs_8;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	81bb      	strh	r3, [r7, #12]
	USART1_Cnfg.USART_HW_FLW_CTL = USART_HwFlowCNTL_NONE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	743b      	strb	r3, [r7, #16]
	USART1_Cnfg.USART_IRQ = USART_IRQ_Enable_RXNEIE;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	747b      	strb	r3, [r7, #17]
	USART1_Cnfg.USART_PARITYBIT = USART_PARITY_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73bb      	strb	r3, [r7, #14]
	USART1_Cnfg.USART_STOPBIT = USART_STOP_BITs_1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	USART1_Cnfg.P_IRQ_CallBack = UART_IRQ_CallBack;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <main+0x40>)
 8000cea:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART1, &USART1_Cnfg);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <main+0x44>)
 8000cf2:	f7ff fd51 	bl	8000798 <MCAL_UART_Init>
	MCAL_UART_GPIO_Init(USART1);
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <main+0x44>)
 8000cf8:	f7ff ff2e 	bl	8000b58 <MCAL_UART_GPIO_Init>

	while(1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0x3c>
 8000cfe:	bf00      	nop
 8000d00:	08000c9d 	.word	0x08000c9d
 8000d04:	40013800 	.word	0x40013800

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 f811 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff ffc1 	bl	8000cc0 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d4c:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 8000d50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d54:	20000070 	.word	0x20000070

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4d0c      	ldr	r5, [pc, #48]	; (8000d94 <__libc_init_array+0x38>)
 8000d62:	4c0d      	ldr	r4, [pc, #52]	; (8000d98 <__libc_init_array+0x3c>)
 8000d64:	1b64      	subs	r4, r4, r5
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	f000 f81a 	bl	8000da4 <_init>
 8000d70:	2600      	movs	r6, #0
 8000d72:	4d0a      	ldr	r5, [pc, #40]	; (8000d9c <__libc_init_array+0x40>)
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <__libc_init_array+0x44>)
 8000d76:	1b64      	subs	r4, r4, r5
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	42a6      	cmp	r6, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d84:	4798      	blx	r3
 8000d86:	3601      	adds	r6, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8e:	4798      	blx	r3
 8000d90:	3601      	adds	r6, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000de4 	.word	0x08000de4
 8000d98:	08000de4 	.word	0x08000de4
 8000d9c:	08000de4 	.word	0x08000de4
 8000da0:	08000de8 	.word	0x08000de8

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
