
Sec_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d4  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "SPI/SPI.h"


int main(void)
{
		DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
		unsigned char ch;
		#ifdef SPI_Slave
			SPI_SlaveInit();
  70:	0e 94 41 00 	call	0x82	; 0x82 <SPI_SlaveInit>
			ch = 255;
			for (ch = 255; ch >= 0; ch--)
  74:	cf ef       	ldi	r28, 0xFF	; 255
			{
				PORTA = SPI_SlaveReceiver(ch);
  76:	8c 2f       	mov	r24, r28
  78:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_SlaveReceiver>
  7c:	8b bb       	out	0x1b, r24	; 27
		DDRA = 0xFF;
		unsigned char ch;
		#ifdef SPI_Slave
			SPI_SlaveInit();
			ch = 255;
			for (ch = 255; ch >= 0; ch--)
  7e:	c1 50       	subi	r28, 0x01	; 1
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0xa>

00000082 <SPI_SlaveInit>:


void SPI_SlaveInit(void)
{
	/*SS,MOSI and clk as input*/
	DDRB &= ~(1<<SS) & ~(1<<MOSI) & ~(1<<CLK);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8f 74       	andi	r24, 0x4F	; 79
  86:	87 bb       	out	0x17, r24	; 23
	
	/*MISO as output*/
	DDRB |= (1<<MISO);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	87 bb       	out	0x17, r24	; 23
	
	/*Set SPE , SPR0*/
	SPCR = (1<<SPE) ;
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	8d b9       	out	0x0d, r24	; 13
  92:	08 95       	ret

00000094 <SPI_SlaveReceiver>:
}


unsigned char SPI_SlaveReceiver(unsigned char Data)
{
	SPDR = Data;
  94:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until Receiving is complete*/
	while(!(SPSR & (1<<SPIF)));
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <SPI_SlaveReceiver+0x2>
	
	return SPDR;
  9a:	8f b1       	in	r24, 0x0f	; 15
}
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
