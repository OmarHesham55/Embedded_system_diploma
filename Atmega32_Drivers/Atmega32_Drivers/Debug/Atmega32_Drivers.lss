
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ad  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000338  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "MCAL/inc/GPIO.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	1f 92       	push	r1
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
		}
	 }
*/

	Pin_Init_t pinInit;
	pinInit.GPIOx = PORTA_e;
  78:	19 82       	std	Y+1, r1	; 0x01
	pinInit.pinDirection = output_e;
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	8b 83       	std	Y+3, r24	; 0x03
	pinInit.pinNumber = PIN_NUMBER_5;
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_GPIO_Init(&pinInit);
  82:	ce 01       	movw	r24, r28
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <MCAL_GPIO_Init>
	
	pinInit.GPIOx = PORTA_e;
  8a:	19 82       	std	Y+1, r1	; 0x01
	pinInit.pinDirection = input_e;
  8c:	1b 82       	std	Y+3, r1	; 0x03
	pinInit.pinNumber = PIN_NUMBER_0;
  8e:	1a 82       	std	Y+2, r1	; 0x02
	MCAL_GPIO_Init(&pinInit);
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	0e 94 4d 00 	call	0x9a	; 0x9a <MCAL_GPIO_Init>
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x2c>

0000009a <MCAL_GPIO_Init>:
 */ 

#include "inc/GPIO.h"

void MCAL_GPIO_Init(Pin_Init_t* pinInit)
{
  9a:	fc 01       	movw	r30, r24
	if (pinInit->pinNumber != PIN_NUMBER_ALL)
  9c:	81 81       	ldd	r24, Z+1	; 0x01
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	09 f4       	brne	.+2      	; 0xa4 <MCAL_GPIO_Init+0xa>
  a2:	85 c0       	rjmp	.+266    	; 0x1ae <MCAL_GPIO_Init+0x114>
	{
		switch (pinInit->pinDirection)
  a4:	92 81       	ldd	r25, Z+2	; 0x02
  a6:	99 23       	and	r25, r25
  a8:	21 f0       	breq	.+8      	; 0xb2 <MCAL_GPIO_Init+0x18>
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	09 f4       	brne	.+2      	; 0xb0 <MCAL_GPIO_Init+0x16>
  ae:	42 c0       	rjmp	.+132    	; 0x134 <MCAL_GPIO_Init+0x9a>
  b0:	08 95       	ret
		{
			case input_e:
	
			switch (pinInit->GPIOx)
  b2:	90 81       	ld	r25, Z
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	a1 f0       	breq	.+40     	; 0xe0 <MCAL_GPIO_Init+0x46>
  b8:	28 f0       	brcs	.+10     	; 0xc4 <MCAL_GPIO_Init+0x2a>
  ba:	92 30       	cpi	r25, 0x02	; 2
  bc:	f9 f0       	breq	.+62     	; 0xfc <MCAL_GPIO_Init+0x62>
  be:	93 30       	cpi	r25, 0x03	; 3
  c0:	59 f1       	breq	.+86     	; 0x118 <MCAL_GPIO_Init+0x7e>
  c2:	08 95       	ret
			{
				case PORTA_e:
				DDRA &= ~(1<<pinInit->pinNumber);
  c4:	4a b3       	in	r20, 0x1a	; 26
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <MCAL_GPIO_Init+0x38>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <MCAL_GPIO_Init+0x34>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8a bb       	out	0x1a, r24	; 26
				break;
  de:	08 95       	ret
		
				case PORTB_e:
				DDRB &= ~(1<<pinInit->pinNumber);
  e0:	47 b3       	in	r20, 0x17	; 23
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <MCAL_GPIO_Init+0x54>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <MCAL_GPIO_Init+0x50>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	87 bb       	out	0x17, r24	; 23
				break;
  fa:	08 95       	ret
		
				case PORTC_e:
				DDRC &= ~(1<<pinInit->pinNumber);
  fc:	44 b3       	in	r20, 0x14	; 20
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <MCAL_GPIO_Init+0x70>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <MCAL_GPIO_Init+0x6c>
 10e:	cb 01       	movw	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	84 bb       	out	0x14, r24	; 20
				break;
 116:	08 95       	ret
		
				case PORTD_e:
				DDRD &= ~(1<<pinInit->pinNumber);
 118:	41 b3       	in	r20, 0x11	; 17
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <MCAL_GPIO_Init+0x8c>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	8a 95       	dec	r24
 128:	e2 f7       	brpl	.-8      	; 0x122 <MCAL_GPIO_Init+0x88>
 12a:	cb 01       	movw	r24, r22
 12c:	80 95       	com	r24
 12e:	84 23       	and	r24, r20
 130:	81 bb       	out	0x11, r24	; 17
				break;
 132:	08 95       	ret
			}
			break;
	
			case output_e:
			
			switch (pinInit->GPIOx)
 134:	90 81       	ld	r25, Z
 136:	91 30       	cpi	r25, 0x01	; 1
 138:	99 f0       	breq	.+38     	; 0x160 <MCAL_GPIO_Init+0xc6>
 13a:	28 f0       	brcs	.+10     	; 0x146 <MCAL_GPIO_Init+0xac>
 13c:	92 30       	cpi	r25, 0x02	; 2
 13e:	e9 f0       	breq	.+58     	; 0x17a <MCAL_GPIO_Init+0xe0>
 140:	93 30       	cpi	r25, 0x03	; 3
 142:	41 f1       	breq	.+80     	; 0x194 <MCAL_GPIO_Init+0xfa>
 144:	08 95       	ret
			{
				case PORTA_e:
				DDRA |= (1<<pinInit->pinNumber);
 146:	4a b3       	in	r20, 0x1a	; 26
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b9 01       	movw	r22, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <MCAL_GPIO_Init+0xba>
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <MCAL_GPIO_Init+0xb6>
 158:	cb 01       	movw	r24, r22
 15a:	84 2b       	or	r24, r20
 15c:	8a bb       	out	0x1a, r24	; 26
				break;
 15e:	08 95       	ret
		
				case PORTB_e:
				DDRB |= (1<<pinInit->pinNumber);
 160:	47 b3       	in	r20, 0x17	; 23
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <MCAL_GPIO_Init+0xd4>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <MCAL_GPIO_Init+0xd0>
 172:	cb 01       	movw	r24, r22
 174:	84 2b       	or	r24, r20
 176:	87 bb       	out	0x17, r24	; 23
				break;
 178:	08 95       	ret
		
				case PORTC_e:
				DDRC |= (1<<pinInit->pinNumber);
 17a:	44 b3       	in	r20, 0x14	; 20
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <MCAL_GPIO_Init+0xee>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <MCAL_GPIO_Init+0xea>
 18c:	cb 01       	movw	r24, r22
 18e:	84 2b       	or	r24, r20
 190:	84 bb       	out	0x14, r24	; 20
				break;
 192:	08 95       	ret
		
				case PORTD_e:
				DDRD |= (1<<pinInit->pinNumber);
 194:	41 b3       	in	r20, 0x11	; 17
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <MCAL_GPIO_Init+0x108>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <MCAL_GPIO_Init+0x104>
 1a6:	cb 01       	movw	r24, r22
 1a8:	84 2b       	or	r24, r20
 1aa:	81 bb       	out	0x11, r24	; 17
				break;
 1ac:	08 95       	ret
	
			break;
		}		
	} 
	
	else if(pinInit->pinNumber == PIN_NUMBER_ALL)
 1ae:	8f 3f       	cpi	r24, 0xFF	; 255
 1b0:	59 f5       	brne	.+86     	; 0x208 <MCAL_GPIO_Init+0x16e>
	{
		switch (pinInit->pinDirection)
 1b2:	82 81       	ldd	r24, Z+2	; 0x02
 1b4:	88 23       	and	r24, r24
 1b6:	19 f0       	breq	.+6      	; 0x1be <MCAL_GPIO_Init+0x124>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <MCAL_GPIO_Init+0x146>
 1bc:	08 95       	ret
		{
		case input_e:
		
			switch (pinInit->GPIOx)
 1be:	80 81       	ld	r24, Z
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <MCAL_GPIO_Init+0x13a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <MCAL_GPIO_Init+0x136>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <MCAL_GPIO_Init+0x13e>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	39 f0       	breq	.+14     	; 0x1dc <MCAL_GPIO_Init+0x142>
 1ce:	08 95       	ret
			{
			case PORTA_e:
				DDRA = 0x00;
 1d0:	1a ba       	out	0x1a, r1	; 26
				break;
 1d2:	08 95       	ret
				
			case PORTB_e:
				DDRB = 0x00;
 1d4:	17 ba       	out	0x17, r1	; 23
				break;
 1d6:	08 95       	ret
				
			case PORTC_e:
				DDRC = 0x00;
 1d8:	14 ba       	out	0x14, r1	; 20
				break;
 1da:	08 95       	ret
				
			case PORTD_e:
				DDRD = 0x00;
 1dc:	11 ba       	out	0x11, r1	; 17
				break;				
 1de:	08 95       	ret
			}
			break;
			
		case output_e:
			switch (pinInit->GPIOx)
 1e0:	80 81       	ld	r24, Z
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	49 f0       	breq	.+18     	; 0x1f8 <MCAL_GPIO_Init+0x15e>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <MCAL_GPIO_Init+0x158>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	49 f0       	breq	.+18     	; 0x1fe <MCAL_GPIO_Init+0x164>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	51 f0       	breq	.+20     	; 0x204 <MCAL_GPIO_Init+0x16a>
 1f0:	08 95       	ret
			{
				case PORTA_e:
					DDRA = 0xFF;	
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	8a bb       	out	0x1a, r24	; 26
					break;
 1f6:	08 95       	ret
					
				case  PORTB_e:
					DDRB = 0xFF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	87 bb       	out	0x17, r24	; 23
					break;
 1fc:	08 95       	ret
				
				case PORTC_e:
					DDRC = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	84 bb       	out	0x14, r24	; 20
					break;
 202:	08 95       	ret
				
				case PORTD_e:
					DDRD = 0xFF;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	81 bb       	out	0x11, r24	; 17
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
