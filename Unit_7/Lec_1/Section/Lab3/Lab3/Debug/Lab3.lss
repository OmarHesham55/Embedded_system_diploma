
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a0  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	char arr[]={0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
		
	DDRC = 0xFF; // DIR of PORTC as Output;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	/*PORTC*/
	
    /* Replace with your application code */
   DDRC = 0xFF;
  70:	84 bb       	out	0x14, r24	; 20
   unsigned char i,j;
   while(1)
   {
	   for(i=0;i<10;i++)
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	24 c0       	rjmp	.+72     	; 0xbe <main+0x52>
	   {
		   for(j=0;j<10;j++)
		   {
			   PORTC = (0b1011)| (i<<4);
  76:	40 e1       	ldi	r20, 0x10	; 16
  78:	94 9f       	mul	r25, r20
  7a:	90 01       	movw	r18, r0
  7c:	11 24       	eor	r1, r1
  7e:	2b 60       	ori	r18, 0x0B	; 11
  80:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	31 ee       	ldi	r19, 0xE1	; 225
  86:	44 e0       	ldi	r20, 0x04	; 4
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	30 40       	sbci	r19, 0x00	; 0
  8c:	40 40       	sbci	r20, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
			   _delay_ms(200);
			   PORTC = (0b0111)| (j<<4);
  94:	40 e1       	ldi	r20, 0x10	; 16
  96:	84 9f       	mul	r24, r20
  98:	90 01       	movw	r18, r0
  9a:	11 24       	eor	r1, r1
  9c:	27 60       	ori	r18, 0x07	; 7
  9e:	25 bb       	out	0x15, r18	; 21
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	31 ee       	ldi	r19, 0xE1	; 225
  a4:	44 e0       	ldi	r20, 0x04	; 4
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
   unsigned char i,j;
   while(1)
   {
	   for(i=0;i<10;i++)
	   {
		   for(j=0;j<10;j++)
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x4c>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	e8 f2       	brcs	.-70     	; 0x76 <main+0xa>
    /* Replace with your application code */
   DDRC = 0xFF;
   unsigned char i,j;
   while(1)
   {
	   for(i=0;i<10;i++)
  bc:	9f 5f       	subi	r25, 0xFF	; 255
  be:	9a 30       	cpi	r25, 0x0A	; 10
  c0:	d0 f3       	brcs	.-12     	; 0xb6 <main+0x4a>
  c2:	d7 cf       	rjmp	.-82     	; 0x72 <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
