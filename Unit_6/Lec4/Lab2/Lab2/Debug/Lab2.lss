
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_2>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void GPIO_Init(void){
	// Pins 2 3 in PORTD as input
	DDRD &= ~(1<<2);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<3);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	81 bb       	out	0x11, r24	; 17
	
	//Pins 5,6,7 in PortD as output
	DDRD |= (1<<PIND5) | (1<<PIND6) | (1<<PIND7);	
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 6e       	ori	r24, 0xE0	; 224
  7c:	81 bb       	out	0x11, r24	; 17
	
	// Pin 2 in PORTB as input
	DDRB &=~(1<<PINB2);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	87 bb       	out	0x17, r24	; 23
  84:	08 95       	ret

00000086 <EXTI_INIT>:
}
	
void EXTI_INIT(void){
	
	// Configure INT0 as any logical change
	MCUCR |= (1<<ISC00);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53
	MCUCR &=~(1<<ISC01);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	8d 7f       	andi	r24, 0xFD	; 253
  90:	85 bf       	out	0x35, r24	; 53
	
	// Configure INT1 as Raising edge
	MCUCR |= (1<<ISC10) | (1<<ISC11);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	85 bf       	out	0x35, r24	; 53
	MCUCR &=~(1<<ISC01);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	85 bf       	out	0x35, r24	; 53
	
	// Configure INT2 as falling edge
	MCUCSR &=~(1<<ISC2);
  9e:	84 b7       	in	r24, 0x34	; 52
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	84 bf       	out	0x34, r24	; 52
	
	GICR |= (1<< INT0) | (1<<INT1) | (1<<INT2); // Enable interrupt 1,2,3
  a4:	8b b7       	in	r24, 0x3b	; 59
  a6:	80 6e       	ori	r24, 0xE0	; 224
  a8:	8b bf       	out	0x3b, r24	; 59
	
	sei(); /*Enable the global interrupt*/
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_1>:

}	


ISR(INT0_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	PORTD ^= (1<<PIND5);
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	98 27       	eor	r25, r24
  c6:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	39 e6       	ldi	r19, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x2a>
  d8:	00 00       	nop
	_delay_ms(1000);
	PORTD ^= (1<<PIND5);
  da:	92 b3       	in	r25, 0x12	; 18
  dc:	89 27       	eor	r24, r25
  de:	82 bb       	out	0x12, r24	; 18
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	3f 91       	pop	r19
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_2>:

ISR(INT1_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
		PORTD ^= (1<<PIND6);
 104:	92 b3       	in	r25, 0x12	; 18
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	98 27       	eor	r25, r24
 10a:	92 bb       	out	0x12, r25	; 18
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	39 e6       	ldi	r19, 0x69	; 105
 110:	98 e1       	ldi	r25, 0x18	; 24
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <__vector_2+0x20>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <__vector_2+0x2a>
 11c:	00 00       	nop
		_delay_ms(1000);
		PORTD ^=(1<<PIND6);
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	89 27       	eor	r24, r25
 122:	82 bb       	out	0x12, r24	; 18
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:

ISR(INT2_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	PORTD ^= (1<<PIND7);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <__vector_3+0x1c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_3+0x26>
 15c:	00 00       	nop
	_delay_ms(1000);
	PORTD ^=(1<<PIND7);
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	80 58       	subi	r24, 0x80	; 128
 162:	82 bb       	out	0x12, r24	; 18
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:
int main(void)
{
	GPIO_Init();
 174:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
	EXTI_INIT();
 178:	0e 94 43 00 	call	0x86	; 0x86 <EXTI_INIT>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x8>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
